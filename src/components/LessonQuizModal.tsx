import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from '@/components/ui/badge';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { useAuth } from '@clerk/clerk-react';
import { toast } from 'sonner';
import { CheckCircle, XCircle, Brain, Trophy, RotateCcw } from 'lucide-react';

interface QuizQuestion {
  id: number;
  question: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
}

interface LessonQuizModalProps {
  isOpen: boolean;
  onClose: () => void;
  lessonTitle: string;
  lessonId?: string;
  onScoreSaved?: (score: number) => void;
}

// 🚧 PLACEHOLDER QUIZ - Feature Under Construction! 🚧
const generateSampleQuiz = (lessonTitle: string): QuizQuestion[] => {
  // Hey there! 👋 This quiz feature is still being built. These are just placeholder questions to show you what's coming!
  return [
    {
      id: 1,
      question: `🚧 Oops! We're still building the quiz for "${lessonTitle}" - but here's a sneak peek! Which of these best describes our current quiz status?`,
      options: [
        "🔨 Under construction (that's us!)",
        "✅ Fully complete and ready",
        "🎯 Perfectly tailored to your lesson",
        "🤖 Generated by super smart AI"
      ],
      correctAnswer: 0,
      explanation: "That's right! We're hard at work building personalized quizzes for each lesson. Stay tuned! 🎉"
    },
    {
      id: 2,
      question: "What should you expect from our quiz feature once it's ready?",
      options: [
        "🎲 Random questions from the internet",
        "📚 Questions perfectly matched to your lesson content",
        "🧩 The same questions for every lesson",
        "❓ Questions that have nothing to do with learning"
      ],
      correctAnswer: 1,
      explanation: "Exactly! We're working on creating custom quizzes that will test your understanding of the specific lesson you just completed. 🎯"
    },
    {
      id: 3,
      question: "How can you help us while we're building this feature?",
      options: [
        "😴 Wait patiently and take a nap",
        "📝 Keep learning with our amazing lessons!",
        "🚫 Stop using the app completely",
        "🤔 Forget this feature exists"
      ],
      correctAnswer: 1,
      explanation: "Perfect! Keep exploring our lessons and building your knowledge. By the time our quizzes are ready, you'll have so much to test yourself on! 📚✨"
    },
    {
      id: 4,
      question: "When will the real quiz feature be available?",
      options: [
        "⏰ Soon™ (we're working hard on it!)",
        "🎂 On your birthday",
        "🌙 When the moon is full",
        "🦄 When unicorns learn to code"
      ],
      correctAnswer: 0,
      explanation: "We're actively developing this feature! Keep an eye out for updates - we'll let you know as soon as personalized quizzes are ready! 🚀"
    },
    {
      id: 5,
      question: "What's the best part about this placeholder quiz?",
      options: [
        "🎭 It's hilariously obvious it's fake",
        "🏆 You always get 100% if you read carefully",
        "🎨 It shows what's coming next",
        "🌟 All of the above!"
      ],
      correctAnswer: 3,
      explanation: "You got it! This playful placeholder lets you experience the quiz interface while we work on the real deal. Thanks for being patient with us! 💙"
    }
  ];
};

export function LessonQuizModal({ isOpen, onClose, lessonTitle, lessonId, onScoreSaved }: LessonQuizModalProps) {
  const { getToken } = useAuth();
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<number[]>([]);
  const [showResults, setShowResults] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [quizScore, setQuizScore] = useState<number | null>(null);

  const questions = generateSampleQuiz(lessonTitle);

  const handleAnswerSelect = (answerIndex: number) => {
    const newAnswers = [...answers];
    newAnswers[currentQuestion] = answerIndex;
    setAnswers(newAnswers);
  };

  const handleNext = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      // Quiz completed, show results
      calculateAndShowResults();
    }
  };

  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  const calculateAndShowResults = async () => {
    const correctAnswers = answers.filter((answer, index) => answer === questions[index].correctAnswer).length;
    const score = Math.round((correctAnswers / questions.length) * 100);
    setQuizScore(score);
    setShowResults(true);

    // Save score to user progress if lesson ID is provided
    if (lessonId) {
      await saveQuizScore(score);
    }
  };

  const saveQuizScore = async (score: number) => {
    setIsSubmitting(true);
    try {
      const token = await getToken();
      if (!token) {
        throw new Error('Failed to get authentication token');
      }

      const response = await fetch('/api/d1/user/progress', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        credentials: 'include',
        body: JSON.stringify({
          lessonId: lessonId,
          completed: score >= 70, // Consider lesson completed if score is 70% or higher
          score: score,
          additionalData: {
            quizCompletedAt: new Date().toISOString(),
            quizAnswers: answers,
            totalQuestions: questions.length,
            correctAnswers: answers.filter((answer, index) => answer === questions[index].correctAnswer).length
          }
        }),
      });

      if (!response.ok) {
        throw new Error(`Failed to save quiz score: ${response.status}`);
      }

      onScoreSaved?.(score);
      toast.success(`Quiz completed! Score: ${score}%`, {
        description: score >= 70 ? 'Great job! Lesson marked as complete.' : 'Keep studying and try again to improve your score.',
      });
    } catch (error) {
      console.error('Error saving quiz score:', error);
      toast.error('Failed to save quiz score. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const resetQuiz = () => {
    setCurrentQuestion(0);
    setAnswers([]);
    setShowResults(false);
    setQuizScore(null);
  };

  const handleClose = () => {
    resetQuiz();
    onClose();
  };

  const getScoreColor = (score: number) => {
    if (score >= 90) return 'text-green-600';
    if (score >= 70) return 'text-blue-600';
    if (score >= 50) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreMessage = (score: number) => {
    if (score >= 90) return 'Excellent! You have mastered this lesson.';
    if (score >= 70) return 'Great job! You have a solid understanding.';
    if (score >= 50) return 'Good effort! Consider reviewing the material.';
    return 'Keep studying! Review the lesson and try again.';
  };

  if (!isOpen) return null;

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Brain className="h-5 w-5 text-blue-600" />
            Quiz: {lessonTitle}
          </DialogTitle>
          <DialogDescription>
            {showResults 
              ? "Quiz completed! Here are your results." 
              : `Question ${currentQuestion + 1} of ${questions.length}`
            }
          </DialogDescription>
        </DialogHeader>

        {!showResults ? (
          <div className="space-y-6">
            {/* Progress bar */}
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-300" 
                style={{ width: `${((currentQuestion + 1) / questions.length) * 100}%` }}
              />
            </div>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg">
                  {questions[currentQuestion].question}
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {questions[currentQuestion].options.map((option, index) => (
                  <Button
                    key={index}
                    variant={answers[currentQuestion] === index ? "default" : "outline"}
                    className="w-full text-left justify-start h-auto p-4"
                    onClick={() => handleAnswerSelect(index)}
                  >
                    <span className="mr-3 font-semibold">
                      {String.fromCharCode(65 + index)}.
                    </span>
                    {option}
                  </Button>
                ))}
              </CardContent>
            </Card>

            {/* Navigation buttons */}
            <div className="flex justify-between">
              <Button
                variant="outline"
                onClick={handlePrevious}
                disabled={currentQuestion === 0}
              >
                Previous
              </Button>
              <Button
                onClick={handleNext}
                disabled={answers[currentQuestion] === undefined}
              >
                {currentQuestion === questions.length - 1 ? 'Finish Quiz' : 'Next Question'}
              </Button>
            </div>
          </div>
        ) : (
          <div className="space-y-6">
            {/* Results Summary */}
            <Card>
              <CardHeader className="text-center">
                <div className="flex justify-center mb-4">
                  <Trophy className={`h-16 w-16 ${getScoreColor(quizScore!)}`} />
                </div>
                <CardTitle className={`text-4xl font-bold ${getScoreColor(quizScore!)}`}>
                  {quizScore}%
                </CardTitle>
                <p className="text-muted-foreground mt-2">
                  {getScoreMessage(quizScore!)}
                </p>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-3 gap-4 text-center">
                  <div>
                    <div className="text-2xl font-bold text-green-600">
                      {answers.filter((answer, index) => answer === questions[index].correctAnswer).length}
                    </div>
                    <div className="text-sm text-muted-foreground">Correct</div>
                  </div>
                  <div>
                    <div className="text-2xl font-bold text-red-600">
                      {questions.length - answers.filter((answer, index) => answer === questions[index].correctAnswer).length}
                    </div>
                    <div className="text-sm text-muted-foreground">Incorrect</div>
                  </div>
                  <div>
                    <div className="text-2xl font-bold text-blue-600">
                      {questions.length}
                    </div>
                    <div className="text-sm text-muted-foreground">Total</div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Detailed Results */}
            <div className="space-y-4 max-h-96 overflow-y-auto">
              {questions.map((question, index) => {
                const userAnswer = answers[index];
                const isCorrect = userAnswer === question.correctAnswer;
                
                return (
                  <Card key={question.id} className={`border-l-4 ${isCorrect ? 'border-l-green-500' : 'border-l-red-500'}`}>
                    <CardHeader className="pb-3">
                      <div className="flex items-start justify-between">
                        <CardTitle className="text-sm font-medium">
                          Question {index + 1}
                        </CardTitle>
                        {isCorrect ? (
                          <CheckCircle className="h-5 w-5 text-green-600 flex-shrink-0" />
                        ) : (
                          <XCircle className="h-5 w-5 text-red-600 flex-shrink-0" />
                        )}
                      </div>
                      <p className="text-sm">{question.question}</p>
                    </CardHeader>
                    <CardContent className="pt-0">
                      <div className="space-y-2">
                        <div className="flex items-center gap-2">
                          <Badge variant={isCorrect ? "success" : "destructive"}>
                            Your answer: {String.fromCharCode(65 + userAnswer)} - {question.options[userAnswer]}
                          </Badge>
                        </div>
                        {!isCorrect && (
                          <div className="flex items-center gap-2">
                            <Badge variant="success">
                              Correct: {String.fromCharCode(65 + question.correctAnswer)} - {question.options[question.correctAnswer]}
                            </Badge>
                          </div>
                        )}
                        <p className="text-xs text-muted-foreground bg-blue-50 p-2 rounded">
                          <strong>Explanation:</strong> {question.explanation}
                        </p>
                      </div>
                    </CardContent>
                  </Card>
                );
              })}
            </div>

            {/* Action buttons */}
            <div className="flex justify-between">
              <Button
                variant="outline"
                onClick={resetQuiz}
                className="flex items-center gap-2"
              >
                <RotateCcw className="h-4 w-4" />
                Retake Quiz
              </Button>
              <Button onClick={handleClose}>
                Close
              </Button>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
} 